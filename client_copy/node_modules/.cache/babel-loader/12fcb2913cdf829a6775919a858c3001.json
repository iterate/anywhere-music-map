{"ast":null,"code":"var _jsxFileName = \"/Users/sherveersinghpannu/projects/map/client/src/App.js\";\nimport React, { useState } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nfunction App() {\n  /*   const spotifyLogin = () => {\n     app.get('/login', function(req, res) {\n       var scopes = 'user-read-private user-read-email';\n       res.redirect('https://accounts.spotify.com/authorize' +\n         '?response_type=code' +\n         '&client_id=' + my_client_id +\n         (scopes ? '&scope=' + encodeURIComponent(scopes) : '') +\n         '&redirect_uri=' + encodeURIComponent(redirect_uri));\n       });\n   } */\n  const clientId = 'f2c4a36edf6541c7922bbaab046328a1';\n  const clientSecret = '835373c22ef349ee9c10567e75ac5ba5';\n  const [accessToken, setAccessToken] = useState('');\n  const [inputValue, setInputValue] = useState('');\n\n  const spotifyLogin2 = async () => {\n    const token = accessToken;\n    console.log(token);\n    const limit = 10;\n    const result = await fetch(`https://api.spotify.com/v1/me/top/artists`, {\n      method: 'GET',\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    });\n    const data = await result.json();\n    return data.items;\n    console.log(data.items);\n  };\n  /*  const Http = new XMLHttpRequest();\n   const url='https://api.spotify.com/v1/me/top/artists';\n   Http.open(\"GET\", url);\n   Http.send(); */\n\n  /* \n  Http.onreadystatechange = (e) => {\n   console.log(Http.responseText) \n   const result = await fetch(`https://api.spotify.com/v1/browse/categories/${genreId}/playlists?limit=${limit}`, {\n             method: 'GET',\n             headers: { 'Authorization' : 'Bearer ' + token}*/\n  //curl -X GET \"https://api.spotify.com/v1/me/top/artists\" -H \"Authorization: Bearer {accessToken}\"\n\n\n  const spotifyLogin = () => {\n    _getToken();\n  };\n\n  const _getToken = async () => {\n    console.log('kommer vi hit');\n    const result = await fetch('https://accounts.spotify.com/api/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: 'Basic ' + btoa(clientId + ':' + clientSecret)\n      },\n      body: 'grant_type=client_credentials'\n    });\n    const data = await result.json();\n    console.log('data:', data.access_token);\n    setAccessToken(data.access_token);\n  };\n\n  const APIController = () => {\n    const clientId = 'f2c4a36edf6541c7922bbaab046328a1';\n    const clientSecret = '835373c22ef349ee9c10567e75ac5ba5'; // private methods\n\n    const _getToken = async () => {\n      console.log('kommer vi hit');\n      const result = await fetch('https://accounts.spotify.com/api/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          Authorization: 'Basic ' + btoa(clientId + ':' + clientSecret)\n        },\n        body: 'grant_type=client_credentials'\n      });\n      const data = await result.json();\n      return data.access_token;\n    };\n\n    _getToken();\n\n    console.log(_getToken());\n\n    const _getGenres = async token => {\n      const result = await fetch(`https://api.spotify.com/v1/browse/categories?locale=sv_US`, {\n        method: 'GET',\n        headers: {\n          Authorization: 'Bearer ' + token\n        }\n      });\n      const data = await result.json();\n      console.log(data.categories.ite);\n      return data.categories.items;\n    };\n\n    const _getPlaylistByGenre = async (token, genreId) => {\n      const limit = 10;\n      const result = await fetch(`https://api.spotify.com/v1/browse/categories/${genreId}/playlists?limit=${limit}`, {\n        method: 'GET',\n        headers: {\n          Authorization: 'Bearer ' + token\n        }\n      });\n      const data = await result.json();\n      return data.playlists.items;\n    };\n\n    const _getTracks = async (token, tracksEndPoint) => {\n      const limit = 10;\n      const result = await fetch(`${tracksEndPoint}?limit=${limit}`, {\n        method: 'GET',\n        headers: {\n          Authorization: 'Bearer ' + token\n        }\n      });\n      const data = await result.json();\n      return data.items;\n    };\n\n    const _getTrack = async (token, trackEndPoint) => {\n      const result = await fetch(`${trackEndPoint}`, {\n        method: 'GET',\n        headers: {\n          Authorization: 'Bearer ' + token\n        }\n      });\n      const data = await result.json();\n      return data;\n    };\n\n    return {\n      getToken() {\n        console.log('hey ');\n        return _getToken();\n      },\n\n      getGenres(token) {\n        return _getGenres(token);\n      },\n\n      getPlaylistByGenre(token, genreId) {\n        return _getPlaylistByGenre(token, genreId);\n      },\n\n      getTracks(token, tracksEndPoint) {\n        return _getTracks(token, tracksEndPoint);\n      },\n\n      getTrack(token, trackEndPoint) {\n        return _getTrack(token, trackEndPoint);\n      }\n\n    };\n  }; // UI Module\n\n\n  const UIController = function () {\n    //object to hold references to html selectors\n    const DOMElements = {\n      selectGenre: '#select_genre',\n      selectPlaylist: '#select_playlist',\n      buttonSubmit: '#btn_submit',\n      divSongDetail: '#song-detail',\n      hfToken: '#hidden_token',\n      divSonglist: '.song-list'\n    }; //public methods\n\n    return {\n      //method to get input fields\n      inputField() {\n        return {\n          genre: document.querySelector(DOMElements.selectGenre),\n          playlist: document.querySelector(DOMElements.selectPlaylist),\n          tracks: document.querySelector(DOMElements.divSonglist),\n          submit: document.querySelector(DOMElements.buttonSubmit),\n          songDetail: document.querySelector(DOMElements.divSongDetail)\n        };\n      },\n\n      // need methods to create select list option\n      createGenre(text, value) {\n        const html = `<option value=\"${value}\">${text}</option>`;\n        document.querySelector(DOMElements.selectGenre).insertAdjacentHTML('beforeend', html);\n      },\n\n      createPlaylist(text, value) {\n        const html = `<option value=\"${value}\">${text}</option>`;\n        document.querySelector(DOMElements.selectPlaylist).insertAdjacentHTML('beforeend', html);\n      },\n\n      // need method to create a track list group item\n      createTrack(id, name) {\n        const html = `<a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-light\" id=\"${id}\">${name}</a>`;\n        document.querySelector(DOMElements.divSonglist).insertAdjacentHTML('beforeend', html);\n      },\n\n      // need method to create the song detail\n      createTrackDetail(img, title, artist) {\n        const detailDiv = document.querySelector(DOMElements.divSongDetail); // any time user clicks a new song, we need to clear out the song detail div\n\n        detailDiv.innerHTML = '';\n        const html = `\n            <div class=\"row col-sm-12 px-0\">\n                <img src=\"${img}\" alt=\"\">        \n            </div>\n            <div class=\"row col-sm-12 px-0\">\n                <label for=\"Genre\" class=\"form-label col-sm-12\">${title}:</label>\n            </div>\n            <div class=\"row col-sm-12 px-0\">\n                <label for=\"artist\" class=\"form-label col-sm-12\">By ${artist}:</label>\n            </div> \n            `;\n        detailDiv.insertAdjacentHTML('beforeend', html);\n      },\n\n      resetTrackDetail() {\n        this.inputField().songDetail.innerHTML = '';\n      },\n\n      resetTracks() {\n        this.inputField().tracks.innerHTML = '';\n        this.resetTrackDetail();\n      },\n\n      resetPlaylist() {\n        this.inputField().playlist.innerHTML = '';\n        this.resetTracks();\n      },\n\n      storeToken(value) {\n        document.querySelector(DOMElements.hfToken).value = value;\n      },\n\n      getStoredToken() {\n        return {\n          token: document.querySelector(DOMElements.hfToken).value\n        };\n      }\n\n    };\n  }();\n\n  const updateInputValue = e => {\n    //e.preventDefault()\n    setInputValue(e.target.value);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"body\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"script\", {\n    src: \"https://sdk.scdn.co/spotify-player.js\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 5\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => spotifyLogin2(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 5\n    }\n  }, \"Login with Spotify\"), /*#__PURE__*/React.createElement(\"input\", {\n    value: inputValue,\n    onChange: e => updateInputValue(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 5\n    }\n  }, inputValue)));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sherveersinghpannu/projects/map/client/src/App.js"],"names":["React","useState","App","clientId","clientSecret","accessToken","setAccessToken","inputValue","setInputValue","spotifyLogin2","token","console","log","limit","result","fetch","method","headers","Authorization","data","json","items","spotifyLogin","_getToken","btoa","body","access_token","APIController","_getGenres","categories","ite","_getPlaylistByGenre","genreId","playlists","_getTracks","tracksEndPoint","_getTrack","trackEndPoint","getToken","getGenres","getPlaylistByGenre","getTracks","getTrack","UIController","DOMElements","selectGenre","selectPlaylist","buttonSubmit","divSongDetail","hfToken","divSonglist","inputField","genre","document","querySelector","playlist","tracks","submit","songDetail","createGenre","text","value","html","insertAdjacentHTML","createPlaylist","createTrack","id","name","createTrackDetail","img","title","artist","detailDiv","innerHTML","resetTrackDetail","resetTracks","resetPlaylist","storeToken","getStoredToken","updateInputValue","e","target"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;AACd;;;;;;;;;;AAWA,QAAMC,QAAQ,GAAG,kCAAjB;AACA,QAAMC,YAAY,GAAG,kCAArB;AACA,QAAM,CAAEC,WAAF,EAAeC,cAAf,IAAkCL,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAAEM,UAAF,EAAcC,aAAd,IAAgCP,QAAQ,CAAC,EAAD,CAA9C;;AAEA,QAAMQ,aAAa,GAAG,YAAY;AACjC,UAAMC,KAAK,GAAGL,WAAd;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAEA,UAAMG,KAAK,GAAG,EAAd;AAEA,UAAMC,MAAM,GAAG,MAAMC,KAAK,CAAE,2CAAF,EAA8C;AACvEC,MAAAA,MAAM,EAAE,KAD+D;AAEvEC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAYR;AAA7B;AAF8D,KAA9C,CAA1B;AAKA,UAAMS,IAAI,GAAG,MAAML,MAAM,CAACM,IAAP,EAAnB;AACA,WAAOD,IAAI,CAACE,KAAZ;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAYO,IAAI,CAACE,KAAjB;AACA,GAdD;AAgBA;;;;;AAIA;;;;;;AAOA;;;AAEA,QAAMC,YAAY,GAAG,MAAM;AAC1BC,IAAAA,SAAS;AACT,GAFD;;AAIA,QAAMA,SAAS,GAAG,YAAY;AAC7BZ,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,UAAME,MAAM,GAAG,MAAMC,KAAK,CAAC,wCAAD,EAA2C;AACpEC,MAAAA,MAAM,EAAE,MAD4D;AAEpEC,MAAAA,OAAO,EAAE;AACR,wBAAgB,mCADR;AAERC,QAAAA,aAAa,EAAE,WAAWM,IAAI,CAACrB,QAAQ,GAAG,GAAX,GAAiBC,YAAlB;AAFtB,OAF2D;AAMpEqB,MAAAA,IAAI,EAAE;AAN8D,KAA3C,CAA1B;AASA,UAAMN,IAAI,GAAG,MAAML,MAAM,CAACM,IAAP,EAAnB;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBO,IAAI,CAACO,YAA1B;AAEApB,IAAAA,cAAc,CAACa,IAAI,CAACO,YAAN,CAAd;AACA,GAfD;;AAiBA,QAAMC,aAAa,GAAG,MAAM;AAC3B,UAAMxB,QAAQ,GAAG,kCAAjB;AACA,UAAMC,YAAY,GAAG,kCAArB,CAF2B,CAI3B;;AAEA,UAAMmB,SAAS,GAAG,YAAY;AAC7BZ,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,YAAME,MAAM,GAAG,MAAMC,KAAK,CAAC,wCAAD,EAA2C;AACpEC,QAAAA,MAAM,EAAE,MAD4D;AAEpEC,QAAAA,OAAO,EAAE;AACR,0BAAgB,mCADR;AAERC,UAAAA,aAAa,EAAE,WAAWM,IAAI,CAACrB,QAAQ,GAAG,GAAX,GAAiBC,YAAlB;AAFtB,SAF2D;AAMpEqB,QAAAA,IAAI,EAAE;AAN8D,OAA3C,CAA1B;AASA,YAAMN,IAAI,GAAG,MAAML,MAAM,CAACM,IAAP,EAAnB;AACA,aAAOD,IAAI,CAACO,YAAZ;AACA,KAbD;;AAcAH,IAAAA,SAAS;;AACTZ,IAAAA,OAAO,CAACC,GAAR,CAAYW,SAAS,EAArB;;AAEA,UAAMK,UAAU,GAAG,MAAOlB,KAAP,IAAiB;AACnC,YAAMI,MAAM,GAAG,MAAMC,KAAK,CAAE,2DAAF,EAA8D;AACvFC,QAAAA,MAAM,EAAE,KAD+E;AAEvFC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAE,YAAYR;AAA7B;AAF8E,OAA9D,CAA1B;AAKA,YAAMS,IAAI,GAAG,MAAML,MAAM,CAACM,IAAP,EAAnB;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAYO,IAAI,CAACU,UAAL,CAAgBC,GAA5B;AAEA,aAAOX,IAAI,CAACU,UAAL,CAAgBR,KAAvB;AACA,KAVD;;AAYA,UAAMU,mBAAmB,GAAG,OAAOrB,KAAP,EAAcsB,OAAd,KAA0B;AACrD,YAAMnB,KAAK,GAAG,EAAd;AAEA,YAAMC,MAAM,GAAG,MAAMC,KAAK,CACxB,gDAA+CiB,OAAQ,oBAAmBnB,KAAM,EADxD,EAEzB;AACCG,QAAAA,MAAM,EAAE,KADT;AAECC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAE,YAAYR;AAA7B;AAFV,OAFyB,CAA1B;AAQA,YAAMS,IAAI,GAAG,MAAML,MAAM,CAACM,IAAP,EAAnB;AACA,aAAOD,IAAI,CAACc,SAAL,CAAeZ,KAAtB;AACA,KAbD;;AAeA,UAAMa,UAAU,GAAG,OAAOxB,KAAP,EAAcyB,cAAd,KAAiC;AACnD,YAAMtB,KAAK,GAAG,EAAd;AAEA,YAAMC,MAAM,GAAG,MAAMC,KAAK,CAAE,GAAEoB,cAAe,UAAStB,KAAM,EAAlC,EAAqC;AAC9DG,QAAAA,MAAM,EAAE,KADsD;AAE9DC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAE,YAAYR;AAA7B;AAFqD,OAArC,CAA1B;AAKA,YAAMS,IAAI,GAAG,MAAML,MAAM,CAACM,IAAP,EAAnB;AACA,aAAOD,IAAI,CAACE,KAAZ;AACA,KAVD;;AAYA,UAAMe,SAAS,GAAG,OAAO1B,KAAP,EAAc2B,aAAd,KAAgC;AACjD,YAAMvB,MAAM,GAAG,MAAMC,KAAK,CAAE,GAAEsB,aAAc,EAAlB,EAAqB;AAC9CrB,QAAAA,MAAM,EAAE,KADsC;AAE9CC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAE,YAAYR;AAA7B;AAFqC,OAArB,CAA1B;AAKA,YAAMS,IAAI,GAAG,MAAML,MAAM,CAACM,IAAP,EAAnB;AACA,aAAOD,IAAP;AACA,KARD;;AAUA,WAAO;AACNmB,MAAAA,QAAQ,GAAG;AACV3B,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,eAAOW,SAAS,EAAhB;AACA,OAJK;;AAKNgB,MAAAA,SAAS,CAAC7B,KAAD,EAAQ;AAChB,eAAOkB,UAAU,CAAClB,KAAD,CAAjB;AACA,OAPK;;AAQN8B,MAAAA,kBAAkB,CAAC9B,KAAD,EAAQsB,OAAR,EAAiB;AAClC,eAAOD,mBAAmB,CAACrB,KAAD,EAAQsB,OAAR,CAA1B;AACA,OAVK;;AAWNS,MAAAA,SAAS,CAAC/B,KAAD,EAAQyB,cAAR,EAAwB;AAChC,eAAOD,UAAU,CAACxB,KAAD,EAAQyB,cAAR,CAAjB;AACA,OAbK;;AAcNO,MAAAA,QAAQ,CAAChC,KAAD,EAAQ2B,aAAR,EAAuB;AAC9B,eAAOD,SAAS,CAAC1B,KAAD,EAAQ2B,aAAR,CAAhB;AACA;;AAhBK,KAAP;AAkBA,GA1FD,CAnEc,CA+Jd;;;AACA,QAAMM,YAAY,GAAI,YAAW;AAChC;AACA,UAAMC,WAAW,GAAG;AACnBC,MAAAA,WAAW,EAAE,eADM;AAEnBC,MAAAA,cAAc,EAAE,kBAFG;AAGnBC,MAAAA,YAAY,EAAE,aAHK;AAInBC,MAAAA,aAAa,EAAE,cAJI;AAKnBC,MAAAA,OAAO,EAAE,eALU;AAMnBC,MAAAA,WAAW,EAAE;AANM,KAApB,CAFgC,CAWhC;;AACA,WAAO;AACN;AACAC,MAAAA,UAAU,GAAG;AACZ,eAAO;AACNC,UAAAA,KAAK,EAAEC,QAAQ,CAACC,aAAT,CAAuBV,WAAW,CAACC,WAAnC,CADD;AAENU,UAAAA,QAAQ,EAAEF,QAAQ,CAACC,aAAT,CAAuBV,WAAW,CAACE,cAAnC,CAFJ;AAGNU,UAAAA,MAAM,EAAEH,QAAQ,CAACC,aAAT,CAAuBV,WAAW,CAACM,WAAnC,CAHF;AAINO,UAAAA,MAAM,EAAEJ,QAAQ,CAACC,aAAT,CAAuBV,WAAW,CAACG,YAAnC,CAJF;AAKNW,UAAAA,UAAU,EAAEL,QAAQ,CAACC,aAAT,CAAuBV,WAAW,CAACI,aAAnC;AALN,SAAP;AAOA,OAVK;;AAYN;AACAW,MAAAA,WAAW,CAACC,IAAD,EAAOC,KAAP,EAAc;AACxB,cAAMC,IAAI,GAAI,kBAAiBD,KAAM,KAAID,IAAK,WAA9C;AACAP,QAAAA,QAAQ,CAACC,aAAT,CAAuBV,WAAW,CAACC,WAAnC,EAAgDkB,kBAAhD,CAAmE,WAAnE,EAAgFD,IAAhF;AACA,OAhBK;;AAkBNE,MAAAA,cAAc,CAACJ,IAAD,EAAOC,KAAP,EAAc;AAC3B,cAAMC,IAAI,GAAI,kBAAiBD,KAAM,KAAID,IAAK,WAA9C;AACAP,QAAAA,QAAQ,CAACC,aAAT,CAAuBV,WAAW,CAACE,cAAnC,EAAmDiB,kBAAnD,CAAsE,WAAtE,EAAmFD,IAAnF;AACA,OArBK;;AAuBN;AACAG,MAAAA,WAAW,CAACC,EAAD,EAAKC,IAAL,EAAW;AACrB,cAAML,IAAI,GAAI,wFAAuFI,EAAG,KAAIC,IAAK,MAAjH;AACAd,QAAAA,QAAQ,CAACC,aAAT,CAAuBV,WAAW,CAACM,WAAnC,EAAgDa,kBAAhD,CAAmE,WAAnE,EAAgFD,IAAhF;AACA,OA3BK;;AA6BN;AACAM,MAAAA,iBAAiB,CAACC,GAAD,EAAMC,KAAN,EAAaC,MAAb,EAAqB;AACrC,cAAMC,SAAS,GAAGnB,QAAQ,CAACC,aAAT,CAAuBV,WAAW,CAACI,aAAnC,CAAlB,CADqC,CAErC;;AACAwB,QAAAA,SAAS,CAACC,SAAV,GAAsB,EAAtB;AAEA,cAAMX,IAAI,GAAI;;4BAEUO,GAAI;;;kEAGkCC,KAAM;;;sEAGFC,MAAO;;aARzE;AAYAC,QAAAA,SAAS,CAACT,kBAAV,CAA6B,WAA7B,EAA0CD,IAA1C;AACA,OAhDK;;AAkDNY,MAAAA,gBAAgB,GAAG;AAClB,aAAKvB,UAAL,GAAkBO,UAAlB,CAA6Be,SAA7B,GAAyC,EAAzC;AACA,OApDK;;AAsDNE,MAAAA,WAAW,GAAG;AACb,aAAKxB,UAAL,GAAkBK,MAAlB,CAAyBiB,SAAzB,GAAqC,EAArC;AACA,aAAKC,gBAAL;AACA,OAzDK;;AA2DNE,MAAAA,aAAa,GAAG;AACf,aAAKzB,UAAL,GAAkBI,QAAlB,CAA2BkB,SAA3B,GAAuC,EAAvC;AACA,aAAKE,WAAL;AACA,OA9DK;;AAgENE,MAAAA,UAAU,CAAChB,KAAD,EAAQ;AACjBR,QAAAA,QAAQ,CAACC,aAAT,CAAuBV,WAAW,CAACK,OAAnC,EAA4CY,KAA5C,GAAoDA,KAApD;AACA,OAlEK;;AAoENiB,MAAAA,cAAc,GAAG;AAChB,eAAO;AACNpE,UAAAA,KAAK,EAAE2C,QAAQ,CAACC,aAAT,CAAuBV,WAAW,CAACK,OAAnC,EAA4CY;AAD7C,SAAP;AAGA;;AAxEK,KAAP;AA0EA,GAtFoB,EAArB;;AAwFA,QAAMkB,gBAAgB,GAAIC,CAAD,IAAO;AAC/B;AACAxE,IAAAA,aAAa,CAACwE,CAAC,CAACC,MAAF,CAASpB,KAAV,CAAb;AACA,GAHD;;AAIA,sBACC;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAQ,IAAA,GAAG,EAAC,uCAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADD,eAIC;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAQ,IAAA,OAAO,EAAE,MAAMpD,aAAa,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADD,eAEC;AAAO,IAAA,KAAK,EAAEF,UAAd;AAA0B,IAAA,QAAQ,EAAGyE,CAAD,IAAOD,gBAAgB,CAACC,CAAD,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFD,eAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIzE,UAAJ,CAHD,CAJD,CADD;AAYA;;AAED,eAAeL,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n\t/*   const spotifyLogin = () => {\n    app.get('/login', function(req, res) {\n      var scopes = 'user-read-private user-read-email';\n      res.redirect('https://accounts.spotify.com/authorize' +\n        '?response_type=code' +\n        '&client_id=' + my_client_id +\n        (scopes ? '&scope=' + encodeURIComponent(scopes) : '') +\n        '&redirect_uri=' + encodeURIComponent(redirect_uri));\n      });\n  } */\n\n\tconst clientId = 'f2c4a36edf6541c7922bbaab046328a1';\n\tconst clientSecret = '835373c22ef349ee9c10567e75ac5ba5';\n\tconst [ accessToken, setAccessToken ] = useState('');\n\tconst [ inputValue, setInputValue ] = useState('');\n\n\tconst spotifyLogin2 = async () => {\n\t\tconst token = accessToken;\n\t\tconsole.log(token);\n\n\t\tconst limit = 10;\n\n\t\tconst result = await fetch(`https://api.spotify.com/v1/me/top/artists`, {\n\t\t\tmethod: 'GET',\n\t\t\theaders: { Authorization: 'Bearer ' + token }\n\t\t});\n\n\t\tconst data = await result.json();\n\t\treturn data.items;\n\t\tconsole.log(data.items);\n\t};\n\n\t/*  const Http = new XMLHttpRequest();\n  const url='https://api.spotify.com/v1/me/top/artists';\n  Http.open(\"GET\", url);\n  Http.send(); */\n\t/* \nHttp.onreadystatechange = (e) => {\n  console.log(Http.responseText) \n  const result = await fetch(`https://api.spotify.com/v1/browse/categories/${genreId}/playlists?limit=${limit}`, {\n            method: 'GET',\n            headers: { 'Authorization' : 'Bearer ' + token}*/\n\n\t//curl -X GET \"https://api.spotify.com/v1/me/top/artists\" -H \"Authorization: Bearer {accessToken}\"\n\n\tconst spotifyLogin = () => {\n\t\t_getToken();\n\t};\n\n\tconst _getToken = async () => {\n\t\tconsole.log('kommer vi hit');\n\t\tconst result = await fetch('https://accounts.spotify.com/api/token', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t\t\tAuthorization: 'Basic ' + btoa(clientId + ':' + clientSecret)\n\t\t\t},\n\t\t\tbody: 'grant_type=client_credentials'\n\t\t});\n\n\t\tconst data = await result.json();\n\t\tconsole.log('data:', data.access_token);\n\n\t\tsetAccessToken(data.access_token);\n\t};\n\n\tconst APIController = () => {\n\t\tconst clientId = 'f2c4a36edf6541c7922bbaab046328a1';\n\t\tconst clientSecret = '835373c22ef349ee9c10567e75ac5ba5';\n\n\t\t// private methods\n\n\t\tconst _getToken = async () => {\n\t\t\tconsole.log('kommer vi hit');\n\t\t\tconst result = await fetch('https://accounts.spotify.com/api/token', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t\t\t\tAuthorization: 'Basic ' + btoa(clientId + ':' + clientSecret)\n\t\t\t\t},\n\t\t\t\tbody: 'grant_type=client_credentials'\n\t\t\t});\n\n\t\t\tconst data = await result.json();\n\t\t\treturn data.access_token;\n\t\t};\n\t\t_getToken();\n\t\tconsole.log(_getToken());\n\n\t\tconst _getGenres = async (token) => {\n\t\t\tconst result = await fetch(`https://api.spotify.com/v1/browse/categories?locale=sv_US`, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: { Authorization: 'Bearer ' + token }\n\t\t\t});\n\n\t\t\tconst data = await result.json();\n\t\t\tconsole.log(data.categories.ite);\n\n\t\t\treturn data.categories.items;\n\t\t};\n\n\t\tconst _getPlaylistByGenre = async (token, genreId) => {\n\t\t\tconst limit = 10;\n\n\t\t\tconst result = await fetch(\n\t\t\t\t`https://api.spotify.com/v1/browse/categories/${genreId}/playlists?limit=${limit}`,\n\t\t\t\t{\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\theaders: { Authorization: 'Bearer ' + token }\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tconst data = await result.json();\n\t\t\treturn data.playlists.items;\n\t\t};\n\n\t\tconst _getTracks = async (token, tracksEndPoint) => {\n\t\t\tconst limit = 10;\n\n\t\t\tconst result = await fetch(`${tracksEndPoint}?limit=${limit}`, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: { Authorization: 'Bearer ' + token }\n\t\t\t});\n\n\t\t\tconst data = await result.json();\n\t\t\treturn data.items;\n\t\t};\n\n\t\tconst _getTrack = async (token, trackEndPoint) => {\n\t\t\tconst result = await fetch(`${trackEndPoint}`, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: { Authorization: 'Bearer ' + token }\n\t\t\t});\n\n\t\t\tconst data = await result.json();\n\t\t\treturn data;\n\t\t};\n\n\t\treturn {\n\t\t\tgetToken() {\n\t\t\t\tconsole.log('hey ');\n\t\t\t\treturn _getToken();\n\t\t\t},\n\t\t\tgetGenres(token) {\n\t\t\t\treturn _getGenres(token);\n\t\t\t},\n\t\t\tgetPlaylistByGenre(token, genreId) {\n\t\t\t\treturn _getPlaylistByGenre(token, genreId);\n\t\t\t},\n\t\t\tgetTracks(token, tracksEndPoint) {\n\t\t\t\treturn _getTracks(token, tracksEndPoint);\n\t\t\t},\n\t\t\tgetTrack(token, trackEndPoint) {\n\t\t\t\treturn _getTrack(token, trackEndPoint);\n\t\t\t}\n\t\t};\n\t};\n\n\t// UI Module\n\tconst UIController = (function() {\n\t\t//object to hold references to html selectors\n\t\tconst DOMElements = {\n\t\t\tselectGenre: '#select_genre',\n\t\t\tselectPlaylist: '#select_playlist',\n\t\t\tbuttonSubmit: '#btn_submit',\n\t\t\tdivSongDetail: '#song-detail',\n\t\t\thfToken: '#hidden_token',\n\t\t\tdivSonglist: '.song-list'\n\t\t};\n\n\t\t//public methods\n\t\treturn {\n\t\t\t//method to get input fields\n\t\t\tinputField() {\n\t\t\t\treturn {\n\t\t\t\t\tgenre: document.querySelector(DOMElements.selectGenre),\n\t\t\t\t\tplaylist: document.querySelector(DOMElements.selectPlaylist),\n\t\t\t\t\ttracks: document.querySelector(DOMElements.divSonglist),\n\t\t\t\t\tsubmit: document.querySelector(DOMElements.buttonSubmit),\n\t\t\t\t\tsongDetail: document.querySelector(DOMElements.divSongDetail)\n\t\t\t\t};\n\t\t\t},\n\n\t\t\t// need methods to create select list option\n\t\t\tcreateGenre(text, value) {\n\t\t\t\tconst html = `<option value=\"${value}\">${text}</option>`;\n\t\t\t\tdocument.querySelector(DOMElements.selectGenre).insertAdjacentHTML('beforeend', html);\n\t\t\t},\n\n\t\t\tcreatePlaylist(text, value) {\n\t\t\t\tconst html = `<option value=\"${value}\">${text}</option>`;\n\t\t\t\tdocument.querySelector(DOMElements.selectPlaylist).insertAdjacentHTML('beforeend', html);\n\t\t\t},\n\n\t\t\t// need method to create a track list group item\n\t\t\tcreateTrack(id, name) {\n\t\t\t\tconst html = `<a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-light\" id=\"${id}\">${name}</a>`;\n\t\t\t\tdocument.querySelector(DOMElements.divSonglist).insertAdjacentHTML('beforeend', html);\n\t\t\t},\n\n\t\t\t// need method to create the song detail\n\t\t\tcreateTrackDetail(img, title, artist) {\n\t\t\t\tconst detailDiv = document.querySelector(DOMElements.divSongDetail);\n\t\t\t\t// any time user clicks a new song, we need to clear out the song detail div\n\t\t\t\tdetailDiv.innerHTML = '';\n\n\t\t\t\tconst html = `\n            <div class=\"row col-sm-12 px-0\">\n                <img src=\"${img}\" alt=\"\">        \n            </div>\n            <div class=\"row col-sm-12 px-0\">\n                <label for=\"Genre\" class=\"form-label col-sm-12\">${title}:</label>\n            </div>\n            <div class=\"row col-sm-12 px-0\">\n                <label for=\"artist\" class=\"form-label col-sm-12\">By ${artist}:</label>\n            </div> \n            `;\n\n\t\t\t\tdetailDiv.insertAdjacentHTML('beforeend', html);\n\t\t\t},\n\n\t\t\tresetTrackDetail() {\n\t\t\t\tthis.inputField().songDetail.innerHTML = '';\n\t\t\t},\n\n\t\t\tresetTracks() {\n\t\t\t\tthis.inputField().tracks.innerHTML = '';\n\t\t\t\tthis.resetTrackDetail();\n\t\t\t},\n\n\t\t\tresetPlaylist() {\n\t\t\t\tthis.inputField().playlist.innerHTML = '';\n\t\t\t\tthis.resetTracks();\n\t\t\t},\n\n\t\t\tstoreToken(value) {\n\t\t\t\tdocument.querySelector(DOMElements.hfToken).value = value;\n\t\t\t},\n\n\t\t\tgetStoredToken() {\n\t\t\t\treturn {\n\t\t\t\t\ttoken: document.querySelector(DOMElements.hfToken).value\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t})();\n\n\tconst updateInputValue = (e) => {\n\t\t//e.preventDefault()\n\t\tsetInputValue(e.target.value);\n\t};\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<body>\n\t\t\t\t<script src=\"https://sdk.scdn.co/spotify-player.js\" />\n\t\t\t</body>\n\t\t\t<div className=\"container\">\n\t\t\t\t<button onClick={() => spotifyLogin2()}>Login with Spotify</button>\n\t\t\t\t<input value={inputValue} onChange={(e) => updateInputValue(e)} />\n\t\t\t\t<p>{inputValue}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}